# !/usr/bin/env python
# -*- coding: utf-8 -*-
# author: wang121ye
# datetime: 2019/8/27 11:46
# software: PyCharm


from ndtpy.tools import *


class Solution:
    def numIslands(self, grid: list(list())) -> int:
        if not grid: return 0
        m, n = len(grid), len(grid[0])
        uf = UnionFind(m * n + 1)
        ret = sum([grid[i][j] == '1' for j in range(n) for i in range(m)])

        def helper(i, j):
            ret = 0
            if grid[i][j] == '0':
                uf.union(m * n, i * n + j)
            if i > 0 and grid[i][j] == grid[i - 1][j] == '1':
                ind1, ind2 = i * n + j, (i - 1) * n + j
                if not uf.connected(ind1, ind2):
                    uf.union(ind1, ind2)
                    ret += 1
            if j > 0 and grid[i][j] == grid[i][j - 1] == '1':
                ind1, ind2 = i * n + j, i * n + j - 1
                if not uf.connected(ind1, ind2):
                    uf.union(ind1, ind2)
                    ret += 1
            return ret

        for ii in range(m):
            for jj in range(n):
                ret -= helper(ii, jj)

        return ret


so = Solution()
# print(so.numIslands(
#     [["1", "1", "1", "1", "0"], ["1", "1", "0", "1", "0"], ["1", "1", "0", "0", "0"], ["0", "0", "0", "0", "0"]]
# ))
# print(so.numIslands(
#     [["1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "0", "1", "0", "1", "1", "1", "1", "1"],
#      ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1"],
#      ["0", "1", "1", "1", "1", "1", "0", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1"],
#      ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1"],
#      ["1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "0", "1"],
#      ["1", "1", "1", "1", "1", "0", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1"],
#      ["1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1"],
#      ["0", "1", "0", "1", "1", "1", "1", "1", "1", "0", "0", "1", "0", "1", "0", "1", "1", "1", "1", "1"],
#      ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
#      ["1", "1", "1", "1", "0", "0", "0", "1", "0", "1", "1", "1", "1", "0", "1", "0", "1", "1", "1", "1"],
#      ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
#      ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "0", "0", "1", "1"],
#      ["0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1"],
#      ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
#      ["1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
#      ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "0", "1", "1"],
#      ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
#      ["1", "0", "1", "1", "1", "0", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
#      ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
#      ["1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"]]
# ))
# print(so.numIslands(
#     [["0", "1", "0", "0", "1", "1", "1", "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", "1", "0", "1"],
#      ["1", "0", "1", "0", "0", "1", "1", "0", "0", "1", "0", "1", "0", "1", "0", "1", "1", "0", "0", "0"],
#      ["0", "1", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", "1", "1", "1", "1", "0", "1"],
#      ["1", "1", "0", "0", "0", "1", "1", "0", "0", "0", "1", "1", "1", "0", "0", "1", "0", "1", "1", "0"],
#      ["0", "1", "0", "1", "1", "0", "1", "0", "0", "0", "1", "0", "0", "1", "0", "0", "0", "0", "0", "1"],
#      ["1", "0", "0", "1", "0", "1", "0", "0", "0", "1", "1", "0", "1", "0", "0", "1", "0", "0", "0", "0"],
#      ["1", "0", "0", "0", "1", "1", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "0", "0", "1"],
#      ["1", "0", "0", "0", "1", "0", "1", "1", "1", "0", "1", "0", "1", "1", "1", "1", "0", "0", "0", "1"],
#      ["1", "0", "0", "1", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "1"],
#      ["0", "0", "0", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "0", "0", "0", "1", "0"],
#      ["1", "0", "1", "0", "1", "0", "0", "1", "1", "1", "0", "1", "1", "0", "0", "1", "1", "0", "0", "0"],
#      ["0", "1", "0", "0", "1", "0", "0", "0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "1", "0"],
#      ["1", "0", "0", "0", "1", "1", "1", "0", "1", "0", "0", "0", "1", "0", "1", "0", "1", "0", "0", "1"],
#      ["0", "0", "0", "0", "1", "0", "1", "1", "0", "1", "0", "1", "0", "1", "1", "1", "1", "0", "0", "0"],
#      ["0", "1", "1", "0", "0", "0", "0", "1", "0", "0", "1", "1", "1", "0", "0", "1", "1", "0", "1", "0"],
#      ["1", "0", "1", "1", "1", "1", "1", "1", "0", "1", "1", "0", "1", "0", "0", "1", "0", "0", "0", "1"],
#      ["1", "0", "0", "0", "1", "0", "1", "0", "0", "1", "0", "1", "0", "0", "1", "0", "0", "1", "1", "1"],
#      ["0", "0", "1", "0", "0", "0", "0", "1", "0", "0", "1", "1", "0", "1", "1", "1", "0", "0", "0", "0"],
#      ["0", "0", "1", "0", "0", "0", "0", "0", "0", "1", "1", "0", "1", "0", "1", "0", "0", "0", "1", "1"],
#      ["1", "0", "0", "0", "1", "0", "1", "1", "1", "0", "0", "1", "0", "1", "0", "1", "1", "0", "0", "0"]]))

print(so.numIslands(
    [["1", "0", "1", "1", "0", "0", "1", "0", "1", "1", "1", "1", "0", "1", "0", "1", "1", "1", "1", "0"],
     ["0", "1", "0", "0", "1", "0", "1", "0", "1", "1", "1", "1", "1", "1", "0", "1", "1", "0", "1", "1"],
     ["1", "0", "0", "1", "0", "1", "0", "1", "0", "1", "1", "0", "1", "1", "1", "0", "0", "1", "1", "0"],
     ["0", "1", "1", "0", "0", "1", "1", "0", "1", "1", "1", "1", "0", "0", "1", "0", "0", "0", "1", "1"],
     ["1", "1", "0", "1", "0", "0", "1", "0", "0", "0", "1", "0", "1", "0", "1", "1", "1", "0", "1", "1"],
     ["0", "0", "0", "0", "1", "0", "1", "1", "0", "0", "1", "0", "0", "1", "0", "1", "1", "1", "1", "0"],
     ["1", "0", "1", "1", "1", "1", "0", "1", "1", "0", "1", "1", "0", "1", "1", "1", "0", "0", "1", "0"],
     ["0", "1", "1", "0", "0", "0", "1", "0", "0", "1", "0", "1", "1", "1", "0", "0", "1", "1", "0", "1"],
     ["0", "0", "0", "0", "1", "1", "0", "1", "0", "0", "1", "1", "0", "1", "0", "0", "1", "0", "1", "0"],
     ["0", "0", "1", "1", "1", "0", "1", "0", "1", "0", "1", "1", "1", "0", "1", "1", "1", "1", "1", "0"],
     ["1", "0", "1", "0", "1", "1", "1", "0", "1", "1", "1", "0", "1", "0", "1", "0", "1", "0", "1", "1"],
     ["0", "0", "1", "1", "1", "1", "0", "1", "1", "1", "0", "1", "0", "0", "0", "1", "1", "1", "0", "1"],
     ["1", "1", "1", "0", "0", "0", "0", "0", "1", "1", "0", "1", "1", "1", "0", "1", "1", "1", "1", "0"],
     ["0", "0", "1", "1", "1", "0", "0", "1", "0", "0", "1", "1", "1", "1", "1", "1", "0", "1", "1", "0"],
     ["0", "0", "0", "1", "1", "0", "0", "0", "0", "1", "1", "0", "1", "0", "0", "1", "1", "1", "1", "1"],
     ["0", "1", "1", "1", "0", "1", "0", "0", "1", "1", "1", "1", "1", "0", "1", "1", "1", "0", "0", "1"],
     ["0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "1", "0", "0", "0", "0", "1", "1", "0"],
     ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "0", "1", "1", "1", "1", "1", "1"],
     ["0", "1", "0", "0", "1", "0", "0", "1", "1", "1", "1", "1", "1", "0", "1", "0", "1", "1", "1", "1"],
     ["0", "0", "1", "1", "1", "1", "1", "0", "0", "0", "1", "1", "1", "1", "1", "1", "0", "1", "1", "0"]]))
